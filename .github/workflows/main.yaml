name: Release application

on:
  push:
  delete:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: dwk-cluster
  GKE_ZONE: asia-southeast1-a
  REGISTRY: asia-southeast1-docker.pkg.dev
  REPOSITORY: my-repository
  FRONTEND_IMAGE: todoapp
  BACKEND_IMAGE: todoapp-backend
  SERVICE: todoapp
  BRANCH: ${{ github.ref_name }}

jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GKE_SA_KEY }}"

      - name: "Set up Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2

      - name: "Use gcloud CLI"
        run: gcloud info

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker asia-southeast1-docker.pkg.dev --quiet

      - name: "Get GKE credentials"
        uses: "google-github-actions/get-gke-credentials@v2"
        with:
          cluster_name: "${{ env.GKE_CLUSTER }}"
          project_id: "${{ env.PROJECT_ID }}"
          location: "${{ env.GKE_ZONE }}"

      - name: Create namespace and secrets
        run: |-
          # Set namespace: use 'project' for main branch, branch name for others
          if [ "${GITHUB_REF#refs/heads/}" = "main" ]; then
            NAMESPACE="project"
          else
            NAMESPACE="${GITHUB_REF#refs/heads/}"
          fi

          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic postgres-key \
            --namespace=$NAMESPACE \
            --from-literal=PGUSER="${{ secrets.POSTGRES_USER }}" \
            --from-literal=PGDATABASE="${{ secrets.POSTGRES_DATABASE }}" \
            --from-literal=PGPASSWORD="${{ secrets.POSTGRES_PASSWORD }}" \
            --dry-run=client -o yaml | kubectl apply -f -

          # Export namespace for use in subsequent steps
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV

      - name: "Form image names"
        run: |-
          echo "FRONTEND_TAG=$REGISTRY/$PROJECT_ID/$REPOSITORY/$FRONTEND_IMAGE:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV
          echo "BACKEND_TAG=$REGISTRY/$PROJECT_ID/$REPOSITORY/$BACKEND_IMAGE:$BRANCH-$GITHUB_SHA" >> $GITHUB_ENV

      - name: Build Frontend
        run: |-
          cd the_project/todo-app
          docker build --tag $FRONTEND_TAG .

      - name: Build Backend
        run: |-
          cd the_project/todo-app-backend
          docker build --tag $BACKEND_TAG .

      - name: Publish to GAR
        run: |-
          docker push $FRONTEND_TAG
          docker push $BACKEND_TAG

      - name: Deploy
        run: |-
          cd the_project/todo-app/manifests

          # Update kustomization to use GAR images and appropriate namespace
          kubectl config set-context --current --namespace=$NAMESPACE
          kustomize edit set namespace $NAMESPACE
          kustomize edit set image todoapp-kustomization=$FRONTEND_TAG
          kustomize edit set image todoapp-backend-kustomization=$BACKEND_TAG

          # Verify kustomization
          echo "Updated kustomization.yaml:"
          cat kustomization.yaml

          # Build and apply
          kustomize build . | kubectl apply -f -

      - name: Wait for deployment and check status
        run: |-
          # Wait for deployment to be available
          kubectl wait --for=condition=available --timeout=300s deployment/todoapp -n $NAMESPACE

          # Check rollout status with proper namespace
          kubectl rollout status deployment/$SERVICE -n $NAMESPACE --timeout=300s

          # Display services and resources in the namespace
          kubectl get services -o wide -n $NAMESPACE
          kubectl get pods -n $NAMESPACE
          kubectl get deployments -n $NAMESPACE

  cleanup-environment:
    name: Cleanup Environment
    runs-on: ubuntu-latest
    if: github.event_name == 'delete' && github.event.ref_type == 'branch'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.GKE_SA_KEY }}"

      - name: "Set up Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2

      - name: "Get GKE credentials"
        uses: "google-github-actions/get-gke-credentials@v2"
        with:
          cluster_name: "${{ env.GKE_CLUSTER }}"
          project_id: "${{ env.PROJECT_ID }}"
          location: "${{ env.GKE_ZONE }}"

      - name: Delete namespace
        run: |-
          # Get the deleted branch name
          DELETED_BRANCH="${{ github.event.ref }}"

          # Skip cleanup for main branch (uses 'project' namespace which should be persistent)
          if [ "$DELETED_BRANCH" = "main" ]; then
            echo "Skipping cleanup for main branch"
            exit 0
          fi

          # Delete the namespace corresponding to the deleted branch
          NAMESPACE="$DELETED_BRANCH"

          echo "Deleting namespace: $NAMESPACE"

          # Check if namespace exists before trying to delete
          if kubectl get namespace "$NAMESPACE" >/dev/null 2>&1; then
            kubectl delete namespace "$NAMESPACE"
            echo "Namespace $NAMESPACE deleted successfully"
          else
            echo "Namespace $NAMESPACE not found, nothing to delete"
          fi
